{"name":"Jquery.inputmask","tagline":"jQuery Input Mask plugin","body":"#jquery.inputmask 3.x\r\n\r\nCopyright (c) 2010 - 2015 Robin Herbots\r\nLicensed under the MIT license (http://opensource.org/licenses/mit-license.php)\r\n\r\n[![NPM Version][npm-image]][npm-url] [![Dependency Status][david-image]][david-url] [![devDependency Status][david-dev-image]][david-dev-url]\r\n\r\njquery.inputmask is a jQuery plugin which create an input mask.\r\n\r\nAn inputmask helps the user with the input by ensuring a predefined format. This can be useful for dates, numerics, phone numbers, ...\r\n\r\nHighlights:\r\n- easy to use\r\n- optional parts anywere in the mask\r\n- possibility to define aliases which hide complexity\r\n- date / datetime masks\r\n- numeric masks\r\n- lots of callbacks\r\n- non-greedy masks\r\n- many features can be enabled/disabled/configured by options\r\n- supports readonly/disabled/dir=\"rtl\" attributes\r\n- support data-inputmask attribute(s)  \r\n- alternator-mask support\r\n- regex-mask support\r\n- dynamic-mask support\r\n- preprocessing-mask support\r\n- value formatting / validating without input element\r\n- AMD/CommonJS support\r\n\r\nDemo page see http://robinherbots.github.io/jquery.inputmask\r\n\r\n[![Donate](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=ZNR3EB6JTMMSS)\r\n\r\n\r\n## Usage:\r\n\r\nInclude the js-files which you can find in the dist-folder. You have the bundled file which contains the main plugin code and also all extensions (date, numerics, other) or if you prefer to only include some parts, use the separate js-files in the dist/min folder.\r\n\r\nIf you use a module loader like requireJS, use the js-files in dist/inputmask\r\n\r\nThe minimum to include is the jquery.inputmask.js\r\n\r\n```html\r\n<script src=\"jquery.js\" type=\"text/javascript\"></script>\r\n<script src=\"jquery.inputmask.js\" type=\"text/javascript\"></script>\r\n```\r\n\r\nDefine your masks:\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"99-9999999\");  //static mask\r\n   $(selector).inputmask(\"mask\", {\"mask\": \"(999) 999-9999\"}); //specifying fn & options\r\n   $(selector).inputmask({\"mask\": \"99-9999999\"}); //specifying options only\r\n   $(selector).inputmask(\"9-a{1,3}9{1,3}\"); //mask with dynamic syntax \r\n});\r\n```\r\n\r\nor via data-inputmask attribute\r\n\r\n```html\r\n<input data-inputmask=\"'alias': 'date'\" />\r\n<input data-inputmask=\"'mask': '9', 'repeat': 10, 'greedy' : false\" />\r\n<input data-inputmask=\"'mask': '99-9999999'\" />\r\n```\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\":input\").inputmask();\r\n});\r\n```\r\n\r\nAny option can also be passed through the use of a data attribute. Use data-inputmask-<***the name op the option***>=\"value\"\r\n\r\n```html\r\n<input id=\"example1\" data-inputmask-clearmaskonlostfocus=\"false\" />\r\n<input id=\"example2\" data-inputmask-regex=\"[a-za-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\" />\r\n```\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#example1\").inputmask(\"99-9999999\");\r\n   $(\"#example2\").inputmask(\"Regex\");\r\n});\r\n```\r\n#### Allowed HTML-elements\r\n\r\n- input type=\"text\" \r\n- input type=\"tel\"\r\n- div contenteditable=\"true\" (and all others supported by contenteditable)\r\n- any html-element (mask text content or set maskedvalue with jQuery.val)\r\n\r\n#### Default masking definitions\r\n\r\n  - 9 : numeric\r\n  - a : alphabetical\r\n  - * : alphanumeric \r\n\r\nThere are more definitions defined within the extensions.  \r\nYou can find info within the js-files or by further exploring the options.\r\n\r\n## Masking types\r\n### Static masks\r\n\r\nThese are the very basic of masking.  The mask is defined and will not change during the input.\r\n\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"aa-9999\");  //static mask\r\n   $(selector).inputmask({mask: \"aa-9999\"});  //static mask\r\n});\r\n```\r\n\r\n### Optional masks\r\n\r\nIt is possible to define some parts in the mask as optional.  This is done by using [ ].\r\n\r\nExample:\r\n\r\n```javascript\r\n$('#test').inputmask('(99) 9999[9]-9999');\r\n```\r\nThis mask wil allow input like (99) 99999-9999 or (99) 9999-9999.  \r\nInput => 12123451234      mask => (12) 12345-1234    (trigger complete)  \r\nInput => 121234-1234      mask => (12) 1234-1234     (trigger complete)  \r\nInput => 1212341234       mask => (12) 12341-234_    (trigger incomplete)  \r\n\r\n#### skipOptionalPartCharacter\r\nAs an extra there is another configurable character which is used to skip an optional part in the mask.  \r\n\r\n```javascript\r\nskipOptionalPartCharacter: \" \",\r\n```\r\nInput => 121234 1234      mask => (12) 1234-1234     (trigger complete)  \r\n\r\nWhen `clearMaskOnLostFocus: true` is set in the options (default), the mask will clear out the optional part when it is not filled in and this only in case the optional part is at the end of the mask.\r\n\r\nFor example, given:\r\n\r\n```javascript\r\n$('#test').inputmask('999[-AAA]');\r\n```\r\nWhile the field has focus and is blank, users will see the full mask `___-___`.\r\nWhen the required part of the mask is filled and the field loses focus, the user will see `123`.\r\nWhen both the required and optional parts of the mask are filled out and the field loses focus, the user will see `123-ABC`.\r\n\r\n#### Optional masks with greedy false\r\n\r\nWhen defining an optional mask together with the greedy: false option, the inputmask will show the smallest possible mask as input first.\r\n\r\n```javascript\r\n$(selector).inputmask({ mask: \"99999[-9999]\", greedy: false });\r\n```\r\n\r\nThe initial mask shown will be \"_____\" instead of \"_____-____\". \r\n\r\n### Dynamic masks\r\n\r\nDynamic masks can change during the input.  To define a dynamic part use { }.\r\n\r\n{n} => n repeats  \r\n{n,m} => from n to m repeats\r\n\r\nAlso {+} and {*} is allowed. + start from 1 and * start from 0.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"aa-9{4}\");  //static mask with dynamic syntax\r\n   $(selector).inputmask(\"aa-9{1,4}\");  //dynamic mask ~ the 9 def can be occur 1 to 4 times\r\n\r\n   //email mask\t\r\n   $(selector).inputmask({\r\n            mask: \"*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]\",\r\n            greedy: false,\r\n            onBeforePaste: function (pastedValue, opts) {\r\n                pastedValue = pastedValue.toLowerCase();\r\n                return pastedValue.replace(\"mailto:\", \"\");\r\n            },\r\n            definitions: {\r\n                '*': {\r\n                    validator: \"[0-9A-Za-z!#$%&'*+/=?^_`{|}~\\-]\",\r\n                    cardinality: 1,\r\n                    casing: \"lower\"\r\n                }\r\n            }\r\n\t});\r\n```\r\n\r\n### Alternator masks\r\n\r\nThe alternator syntax is like an **OR** statement.  The mask can be one of the 2 choices specified in the alternator.\r\n\r\nTo define an alternator use the |.  \r\nex: \"a|9\" => a or 9  \r\n\t\"(aaa)|(999)\" => aaa or 999  \r\n\r\nAlso make sure to read about the keepStatic option.  \r\n\r\n```javascript\r\n$(\"selector\").inputmask(\"(99.9)|(X)\", {\r\n                definitions: {\r\n                    \"X\": {\r\n                        validator: \"[xX]\",\r\n                        cardinality: 1,\r\n                        casing: \"upper\"\r\n                    }\r\n                }\r\n            });\r\n```\r\nor\r\n\r\n```javascript\r\n$(\"selector\").inputmask({\r\n                mask: [\"99.9\", \"X\"],\r\n                definitions: {\r\n                    \"X\": {\r\n                        validator: \"[xX]\",\r\n                        cardinality: 1,\r\n                        casing: \"upper\"\r\n                    }\r\n                }\r\n            });\r\n```\r\n\r\n### Preprocessing masks\r\n\r\nYou can define the mask as a function which can allow to preprocess the resulting mask.  Example sorting for multiple masks or retrieving mask definitions dynamically through ajax.\r\nThe preprocessing fn should return a valid mask definition.\r\n\r\n```javascript\r\n  $(selector).inputmask({ mask: function () { /* do stuff */ return [\"[1-]AAA-999\", \"[1-]999-AAA\"]; }});\r\n```\r\n\r\n## Define custom definitions\r\n\r\nYou can define your own definitions to use in your mask.  \r\nStart by choosing a masksymbol. \r\n\r\n##### validator(chrs, maskset, pos, strict, opts)\r\nNext define your validator.  The validator can be a regular expression or a function. \r\n\r\nThe return value of a validator can be true,  false or a command object.  \r\n###### Options of the command object\r\n- pos : position to insert\r\n- c : character to insert\r\n- caret : position of the caret\r\n- remove : position(s) to remove  \r\n\t- pos or [pos1, pos2]\r\n- insert : position(s) to add :  \r\n    - { pos : position to insert, c : character to insert }  \r\n\t- [{ pos : position to insert, c : character to insert }, { ...}, ... ]\r\n- refreshFromBuffer : \r\n\t- true => refresh validPositions from the complete buffer\r\n\t- { start: , end: } => refresh from start to end\r\n\r\n##### cardinality\r\nCardinality specifies how many characters are represented and validated for the definition.\r\n\r\n##### prevalidator(chrs, maskset, pos, strict, opts)\r\nThe prevalidator option is \r\nused to validate the characters before the definition cardinality is reached. (see 'j' example)\r\n\r\n##### definitionSymbol\r\nWhen you insert or delete characters, they are only shifted when the definition type is the same.  This behavior can be overridden\r\nby giving a definitionSymbol. (see example x, y, z, which can be used for ip-address masking, the validation is different, but it is allowed to shift the characters between the definitions)\r\n\r\n```javascript\r\n$.extend($.inputmask.defaults.definitions, {\r\n    'f': {  //masksymbol\r\n        \"validator\": \"[0-9\\(\\)\\.\\+/ ]\",\r\n        \"cardinality\": 1,\r\n        'prevalidator': null\r\n    },\r\n\t'g': {\r\n        \"validator\": function (chrs, buffer, pos, strict, opts) { \r\n\t\t\t//do some logic and return true, false, or { \"pos\": new position, \"c\": character to place }\r\n\t\t}\t\t\r\n        \"cardinality\": 1,\r\n        'prevalidator': null\r\n    },\r\n\t'j': { //basic year\r\n            validator: \"(19|20)\\\\d{2}\",\r\n            cardinality: 4,\r\n            prevalidator: [\r\n                        { validator: \"[12]\", cardinality: 1 },\r\n                        { validator: \"(19|20)\", cardinality: 2 },\r\n                        { validator: \"(19|20)\\\\d\", cardinality: 3 }\r\n            ]\r\n     }, \r\n\t 'x': {\r\n        validator: \"[0-2]\",\r\n        cardinality: 1,\r\n        definitionSymbol: \"i\" //this allows shifting values from other definitions, with the same masksymbol or definitionSymbol\r\n     },\r\n     'y': {\r\n        validator: function (chrs, buffer, pos, strict, opts) {\r\n                        var valExp2 = new RegExp(\"2[0-5]|[01][0-9]\");\r\n                        return valExp2.test(buffer[pos - 1] + chrs);\r\n                    },\r\n        cardinality: 1,\r\n        definitionSymbol: \"i\"\r\n     },\r\n     'z': {\r\n        validator: function (chrs, buffer, pos, strict, opts) {\r\n                       var valExp3 = new RegExp(\"25[0-5]|2[0-4][0-9]|[01][0-9][0-9]\");\r\n                        return valExp3.test(buffer[pos - 2] + buffer[pos - 1] + chrs);\r\n        },\r\n        cardinality: 1,\r\n        definitionSymbol: \"i\"\r\n      }\r\n});\r\n```\r\n\r\n##### placeholder\r\nSpecify a placeholder for a definition.\r\n\r\n### set defaults\r\n\r\nDefaults can be set as below.\r\n```javascript\r\n$.extend($.inputmask.defaults, {\r\n    'autoUnmask': true\r\n});\r\n```\r\nBut if the property is defined within an alias you need to set it for the alias definition.\r\n\r\n```javascript\r\n$.extend($.inputmask.defaults.aliases.numeric , {\r\n    allowPlus: false,\r\n    allowMinus: false\r\n});\r\n```\r\n\r\nHowever, the preferred way to alter properties for an alias is by creating a new alias which inherits from the default alias definition.\r\n\r\n```javascript\r\n $.extend($.inputmask.defaults.aliases, {\r\n\t'myNum': {\r\n            alias: \"numeric\",\r\n \t\t\tplaceholder: '',\r\n    \t\tallowPlus: false,\r\n    \t\tallowMinus: false\r\n        }\r\n});\r\n```\r\n\r\nOnce defined, you can call the alias by:  \r\n```javascript\r\n $(selector).inputmask(\"myNum\");\r\n```\r\n\r\n## Options:\r\n\r\n#### placeholder\r\n\r\nChange the mask placeholder\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#date\").inputmask(\"d/m/y\",{ \"placeholder\": \"*\" });\r\n});\r\n```\r\n\r\nor a multi-char placeholder\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#date\").inputmask(\"d/m/y\",{ \"placeholder\": \"dd/mm/yyyy\" });\r\n});\r\n```\r\n#### optionalmarker\r\n\r\nDefinition of the symbols used to indicate an optional part in the mask.  \r\n```javascript\r\noptionalmarker: { start: \"[\", end: \"]\" },\r\n```\r\n#### quantifiermarker\r\n\r\nDefinition of the symbols used to indicate a quantifier in the mask.  \r\n```javascript\r\nquantifiermarker: { start: \"{\", end: \"}\" },\r\n```\r\n#### groupmarker\r\n\r\nDefinition of the symbols used to indicate a group in the mask.  \r\n```javascript\r\ngroupmarker: { start: \"(\", end: \")\" },\r\n```\r\n#### alternatormarker\r\n\r\nDefinition of the symbols used to indicate an alternator part in the mask.  \r\n```javascript\r\nalternatormarker: \"|\",\r\n```\r\n#### escapeChar\r\n\r\nDefinition of the symbols used to escape a part in the mask.  \r\n```javascript\r\nescapeChar: \"\\\\\",\r\n```\r\nSee **escape special mask chars**\r\n\r\n#### mask\r\n\r\nThe mask to use.\r\n\r\n#### oncomplete\r\n\r\nExecute a function when the mask is completed\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#date\").inputmask(\"d/m/y\",{ \"oncomplete\": function(){ alert('inputmask complete'); } });\r\n});\r\n```\r\n\r\n#### onincomplete\r\n\r\nExecute a function when the mask is incomplete.  Executes on blur.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#date\").inputmask(\"d/m/y\",{ \"onincomplete\": function(){ alert('inputmask incomplete'); } });\r\n});\r\n```\r\n#### oncleared\r\n\r\nExecute a function when the mask is cleared.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#date\").inputmask(\"d/m/y\",{ \"oncleared\": function(){ alert('inputmask cleared'); } });\r\n});\r\n```\r\n\r\n#### repeat\r\n\r\nMask repeat function. Repeat the mask definition x-times.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#number\").inputmask({ \"mask\": \"9\", \"repeat\": 10 });  // ~ mask \"9999999999\"\r\n});\r\n```\r\n\r\n#### greedy\r\n\r\nToggle to allocate as much possible or the opposite.\r\nNon-greedy repeat function.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#number\").inputmask({ \"mask\": \"9\", \"repeat\": 10, \"greedy\": false });  // ~ mask \"9\" or mask \"99\" or ... mask \"9999999999\"\r\n});\r\n```\r\n\r\nWith the non-greedy option set to false, you can specify * as repeat.  This makes an endless repeat.\r\n\r\n#### autoUnmask\r\n\r\nAutomatically unmask the value when retrieved.  \r\nDefault: false.\r\n\r\n#### removeMaskOnSubmit\r\nRemove the mask before submitting the form.  \r\nDefault: false\r\n\r\n#### clearMaskOnLostFocus\r\n\r\nRemove the empty mask on blur or when not empty removes the optional trailing part\r\nDefault: true\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\"#ssn\").inputmask(\"999-99-9999\",{placeholder:\" \", clearMaskOnLostFocus: true }); //default\r\n});\r\n```\r\n\r\n#### insertMode\r\n\r\nToggle to insert or overwrite input.  \r\nDefault: true.  \r\nThis option can be altered by pressing the Insert key.\r\n\r\n#### clearIncomplete\r\n\r\nClear the incomplete input on blur\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#date\").inputmask(\"d/m/y\",{ \"clearIncomplete\": true } });\r\n});\r\n```\r\n\r\n#### aliases\r\n\r\nDefinitions of aliases.\r\n\r\nWith an alias you can define a complex mask definition and call it by using an alias name.  So this is mainly to simplify the use of your masks.  Some aliases found in the extensions are: email, currency, decimal, integer, date, datetime, dd/mm/yyyy, etc. \r\n\r\n\r\nFirst you have to create an alias definition.  The alias definition can contain options for the mask, custom definitions, the mask to use etc. \r\n\r\nWhen you pass in an alias, the alias is first resolved and then the other options are applied.  So you can call an alias and pass another mask to be applied over the alias.\r\nThis also means that you can write aliases which \"inherit\" from another alias.\r\n\r\nSome examples can be found in jquery.inputmask.xxx.extensions.js\r\n\r\nuse:\r\n\r\n```javascript\r\n   $(\"#date\").inputmask(\"date\");\r\n```\r\nor\r\n```javascript\r\n   $(\"#date\").inputmask({ alias: \"date\"});\r\n```\r\n\r\nYou can also call an alias and extend it with some more options\r\n\r\n```javascript\r\n   $(\"#date\").inputmask(\"date\", { \"clearIncomplete\": true });\r\n```\r\nor\r\n```javascript\r\n   $(\"#date\").inputmask({ alias: \"date\", \"clearIncomplete\": true });\r\n```\r\n\r\n#### alias\r\n\r\nThe alias to use.\r\n```javascript\r\n   $(\"#date\").inputmask({ alias: \"email\"});\r\n```\r\n\r\n#### onKeyDown\r\nCallback to implement autocomplete on certain keys for example\r\n\r\nFunction arguments: event, buffer, caretPos, opts  \r\nFunction return: \r\n\r\n#### onBeforeMask\r\n\r\nExecutes before masking the initial value to allow preprocessing of the initial value.\r\n  \r\nFunction arguments: initialValue, opts  \r\nFunction return: processedValue\r\n\r\n```javascript\r\n$(selector).inputmask({\r\n                alias: 'phonebe',\r\n                onBeforeMask: function (value, opts) {\r\n                     \t\t    var processedValue = value.replace(/^0/g, \"\");\r\n                                if (processedValue.indexOf(\"32\") > 1 || \tprocessedValue.indexOf(\"32\") == -1) {\r\n                                    processedValue = \"32\" + processedValue;\r\n                                }\r\n                                      \r\n                                return processedValue;\r\n                            }\r\n            });\r\n```\r\n\r\n\r\n#### onBeforePaste\r\n\r\nThis callback allows for preprocessing the pasted value before actually handling the value for masking.  This can be usefull for stripping away some characters before processing.\r\n\r\nFunction arguments: pastedValue, opts  \r\nFunction return: processedValue\r\n\r\n```javascript\r\n$(selector).inputmask({\r\n                mask: '9999 9999 9999 9999',\r\n                placeholder: ' ',\r\n                showMaskOnHover: false,\r\n                showMaskOnFocus: false,\r\n                onBeforePaste: function (pastedValue, opts) { \r\n\t\t\t\t\tvar processedValue = pastedValue; \r\n\r\n\t\t\t\t\t//do something with it\r\n\r\n\t\t\t\t\treturn processedValue; \r\n\t\t\t\t}\r\n            });\r\n```\r\n\r\nYou can also disable pasting a value by returning false in the onBeforePaste call.\r\n\r\n#### onBeforeWrite\r\n\r\nExecutes before writing to the masked element \r\n\r\nUse this to do some extra processing of the input.\r\nThis can be usefull when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.\r\n \r\nFunction arguments: event, buffer, caretPos, opts  \r\nFunction return: command object (see Define custom definitions)\r\n\r\n\r\n#### onUnMask\r\n\r\nExecutes after unmasking to allow post-processing of the unmaskedvalue. \r\n\r\nFunction arguments: maskedValue, unmaskedValue  \r\nFunction return: processedValue\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#number\").inputmask(\"decimal\", { onUnMask: function(maskedValue, unmaskedValue) {\r\n\t\t//do something with the value\r\n\t\treturn unmaskedValue;\r\n   }});\r\n});\r\n```\r\n#### showMaskOnFocus\r\n\r\nShows the mask when the input gets focus. (default = true)\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\"#ssn\").inputmask(\"999-99-9999\",{ showMaskOnFocus: true }); //default\r\n});\r\n```\r\n\r\nTo make sure no mask is visible on focus also set the showMaskOnHover to false.  Otherwise hovering with the mouse will set the mask and will stay on focus.\r\n\r\n#### showMaskOnHover\r\n\r\nShows the mask when hovering the mouse. (default = true)\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\"#ssn\").inputmask(\"999-99-9999\",{ showMaskOnHover: true }); //default\r\n});\r\n```\r\n\r\n#### onKeyValidation\r\n\r\nCallback function is executed on every keyvalidation with the result as parameter.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\"#ssn\").inputmask(\"999-99-9999\",\r\n\t\t\t{ onKeyValidation: function (result) {\r\n\t\t\t\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t\t\t\t\t} });\r\n});\r\n```\r\n\r\n#### skipOptionalPartCharacter\r\n#### showTooltip\r\n\r\nShow the current mask definition as a tooltip.\r\n\r\n```javascript\r\n  $(selector).inputmask({ mask: [\"999-999-9999 [x99999]\", \"+099 99 99 9999[9]-9999\"], showTooltip: true });\r\n```\r\n\r\n#### numericInput\r\n\r\nNumeric input direction.  Keeps the caret at the end.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(selector).inputmask('€ 999.999.999,99', { numericInput: true });    //123456  =>  € ___.__1.234,56\r\n});\r\n```\r\n\r\n#### rightAlign\r\n\r\nAlign the input to the right\r\n\r\nBy setting the rightAlign you can specify to right align an inputmask. This is only applied in combination op the numericInput option or the dir-attribute. Default is true.  \r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(selector).inputmask('decimal', { rightAlign: false });  //disables the right alignment of the decimal input\r\n});\r\n```\r\n#### undoOnEscape\r\nMake escape behave like undo. (ctrl-Z)  \r\nPressing escape reverts the value to the value before focus.  \r\nDefault: true \r\n\r\n#### radixPoint\r\n\r\nDefine the radixpoint (decimal separator)  \r\nDefault: \"\"\r\n\r\n####radixFocus\r\n\r\nPosition the caret to the radixpoint on the initial click into the inputfield.  \r\nDefault: false\r\n\r\n#### nojumps\r\n \r\nDo not jump over fixed parts in the mask.  \r\nDefault: false\r\n#### nojumpsThreshold\r\n\r\nStart nojumps as of  \r\nDefault: 0\r\n \r\n#### keepStatic\r\nDefault: undefined (~false)   \r\nUse in combination with the alternator syntax\r\nTry to keep the mask static while typing. Decisions to alter the mask will be posponed if possible.\r\n\r\nex.\r\n$(selector).inputmask({ mask: [\"+55-99-9999-9999\", \"+55-99-99999-9999\", ], keepStatic: true });\r\n\r\ntyping 1212345123 => should result in +55-12-1234-5123 \r\ntype extra 4 => switch to +55-12-12345-1234\r\n\r\nWhen passing multiple masks (an array of masks) keepStatic is automatically set to true unless explicitly set through the options.\r\n\r\n#### definitions\r\n#### ignorables\r\n\r\n#### isComplete\r\n\r\nWith this call-in (hook) you can override the default implementation of the isComplete function.  \r\nArgs => buffer, opts   \r\nReturn => true|false\r\n\r\n```javascript\r\n$(selector).inputmask(\"Regex\", { \r\n\tregex: \"[0-9]*\", \r\n\tisComplete: function(buffer, opts) {\r\n\t\treturn new RegExp(opts.regex).test(buffer.join(''));\r\n\t}\r\n});\r\n```\r\n#### canClearPosition\r\nHook to alter the clear behavior in the stripValidPositions  \r\nArgs => maskset, position, lastValidPosition, opts  \r\nReturn => true|false\r\n\r\n#### postValidation\r\nHook to postValidate the result from isValid.  Usefull for validating the entry as a whole.  Args => buffer, opts  \r\nReturn => true|false\r\n\r\n\r\n##Functions\r\n\r\n#### mask\r\n#### unmaskedvalue\r\n\r\nGet the unmaskedvalue\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask('unmaskedvalue');\r\n});\r\n```\r\n#### remove\r\n\r\nRemove the inputmask.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(selector).inputmask('remove');\r\n});\r\n```\r\n\r\n#### getemptymask\r\n\r\nreturn the default (empty) mask value\r\n\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#test\").inputmask(\"999-AAA\");\r\n   var initialValue = $(\"#test\").inputmask(\"getemptymask\");  // initialValue  => \"___-___\"\r\n});\r\n```\r\n\r\n#### hasMaskedValue\r\n\r\nCheck whether the returned value is masked or not; currently only works reliably when using jquery.val fn to retrieve the value \r\n\r\n```javascript\r\n$(document).ready(function(){\r\n\tfunction validateMaskedValue(val){}\r\n\tfunction validateValue(val){}\r\n\r\n\tvar val = $(\"#test\").val();\r\n    if($(\"#test\").inputmask(\"hasMaskedValue\"))\r\n\t  validateMaskedValue(val); \r\n   else validateValue(val); \r\n});\r\n```\r\n\r\n#### isComplete\r\n\r\nVerify whether the current value is complete or not.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    if($(selector).inputmask(\"isComplete\")){\r\n\t\t//do something\r\n\t}\r\n});\r\n```\r\n#### getmetadata\r\n\r\nThe metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata.  If only a mask is provided the mask definition will be returned by the getmetadata.  \r\n\r\n```javascript\r\n$(selector).inputmask(\"getmetadata\");\r\n```\r\n\r\n##General\r\n\r\n### set a value and apply mask\r\n\r\nthis can be done with the traditional jquery.val function (all browsers) or JavaScript value property for browsers which implement lookupGetter or getOwnPropertyDescriptor\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#number\").val(12345);\r\n\r\n   var number = document.getElementById(\"number\");\r\n   number.value = 12345;\r\n});\r\n```\r\n\r\nwith the autoUnmaskoption you can change the return of $.fn.val (or value property) to unmaskedvalue or the maskedvalue\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   \t$('#<%= tbDate.ClientID%>').inputmask({ \"mask\": \"d/m/y\", 'autoUnmask' : true});\t//  value: 23/03/1973\r\n\talert($('#<%= tbDate.ClientID%>').val());\t// shows 23031973     (autoUnmask: true)\r\n\r\n\tvar tbDate = document.getElementById(\"<%= tbDate.ClientID%>\");\r\n    alert(tbDate.value);\t// shows 23031973     (autoUnmask: true)\r\n});\r\n```\r\n### escape special mask chars\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\"#months\").inputmask(\"m \\\\months\");\r\n});\r\n```\r\n### auto upper/lower- casing inputmask\r\n\r\nYou can define within a definition to automatically lowercase or uppercase the entry in an input by giving the casing.  \r\nCasing can be null, \"upper\" or \"lower\"\r\n```javascript\r\n    $.extend($.inputmask.defaults.definitions, {\r\n        'A': { \r\n            validator: \"[A-Za-z]\",\r\n            cardinality: 1,\r\n            casing: \"upper\" //auto uppercasing\r\n        },\r\n        '#': {\r\n            validator: \"[A-Za-z\\u0410-\\u044F\\u0401\\u04510-9]\",\r\n            cardinality: 1,\r\n            casing: \"upper\"\r\n        }\r\n    });\r\n```\r\n\r\nInclude jquery.inputmask.extensions.js for using the A and # definitions.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(\"#test\").inputmask(\"999-AAA\");    //   => 123abc ===> 123-ABC\r\n});\r\n```\r\n\r\n## Supported markup options\r\n### RTL attribute\r\n\r\n```html\r\n<input id=\"test\" dir=\"rtl\" />\r\n```\r\n### readonly attribute\r\n\r\n```html\r\n<input id=\"test\" readonly=\"readonly\" />\r\n```\r\n### disabled attribute\r\n\r\n```html\r\n<input id=\"test\" disabled=\"disabled\" />\r\n```\r\n\r\n### maxlength attribute\r\n\r\n```html\r\n<input id=\"test\" maxlength=\"4\" />\r\n```\r\n### data-inputmask attribute\r\n\r\nYou can also apply an inputmask by using the data-inputmask attribute.  In the attribute you specify the options wanted for the inputmask.\r\nThis gets parsed with $.parseJSON (for the moment), so be sure to use a well-formed json-string without the {}.\r\n\r\n```html\r\n<input data-inputmask=\"'alias': 'date'\" />\r\n<input data-inputmask=\"'mask': '9', 'repeat': 10, 'greedy' : false\" />\r\n```\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\":input\").inputmask();\r\n});\r\n```\r\n### data-inputmask-<option\\> attribute\r\n\r\nAll options can also be passed through data-attributes. \r\n\r\n\r\n```html\r\n<input data-inputmask-mask=\"9\" data-inputmask-repeat=\"10\" data-inputmask-greedy=\"false\" />\r\n```\r\n```javascript\r\n$(document).ready(function(){\r\n    $(\":input\").inputmask();\r\n});\r\n```\r\n\r\n## Value formatting\r\n\r\nInstead of masking an input element it is also possible to use the inputmask for formatting given values.\r\nThink of formatting values to show in jqGrid or on other elements then inputs.\r\n\r\n```javascript\r\nvar formattedDate = $.inputmask.format(\"2331973\", { alias: \"dd/mm/yyyy\"});\r\n```\r\n\r\n## Value validating\r\n\r\nValidate a given value against the mask.\r\n\r\n```javascript\r\nvar isValid = $.inputmask.isValid(\"23/03/1973\", { alias: \"dd/mm/yyyy\"});\r\n```\r\n\r\n## .NET Nuget Package Install\r\n```html\r\nPM> Install-Package jQuery.InputMask\r\n```\r\n\r\nIn App_Start, BundleConfig.cs\r\n```c#\r\nbundles.Add(new ScriptBundle(\"~/bundles/inputmask\").Include(\r\n                        \"~/Scripts/jquery.inputmask/jquery.inputmask.js\",\r\n\t\t\t\t\t\t\"~/Scripts/jquery.inputmask/jquery.inputmask.extensions.js\",\r\n\t\t\t\t\t\t\"~/Scripts/jquery.inputmask/jquery.inputmask.date.extensions.js\",\r\n\t\t\t\t\t\t//and other extensions you want to include\r\n\t\t\t\t\t\t\"~/Scripts/jquery.inputmask/jquery.inputmask.numeric.extensions.js\"));\r\n```\r\n\r\nIn Layout\r\n```html\r\n@Scripts.Render(\"~/bundles/inputmask\")\r\n```\r\n# jquery.inputmask extensions\r\n\r\n\r\n#=========== TODO ===========\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n## date & datetime extensions\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"dd/mm/yyyy\");\r\n   $(selector).inputmask(\"mm/dd/yyyy\");\r\n   $(selector).inputmask(\"date\"); // alias for dd/mm/yyyy\r\n   $(selector).inputmask(\"date\", {yearrange: { minyear: 1900, maxyear: 2099 }}); //specify year range\r\n});\r\n```\r\n\r\nThe date aliases take leap years into account.  There is also autocompletion on day, month, year.\r\nFor example:\r\n\r\ninput:\t2/2/2012 \t\tresult: 02/02/2012  \r\ninput:  352012\t\t\tresult: 03/05/2012  \r\ninput:  3/530\t\t\tresult: 03/05/2030  \r\ninput:  ctrl rightarrow\t        result: the date from today  \r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"datetime\"); // 24h\r\n   $(selector).inputmask(\"datetime12\"); // am/pm\r\n});\r\n```\r\n\r\n### jqueryui.datepicker example\r\n```javascript\r\n    $('#calender').datepicker({\r\n                dateFormat: 'dd/mm/yy',                \r\n                changeMonth: true,\r\n                changeYear: true\r\n    }).inputmask('dd/mm/yyyy');\r\n```\r\n\r\n## numeric extensions\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"decimal\");\r\n   $(selector).inputmask(\"decimal\", { allowMinus: false });\r\n   $(selector).inputmask(\"integer\");\r\n});\r\n```\r\n\r\nDefine the radixpoint\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"decimal\", { radixPoint: \",\" });\r\n});\r\n```\r\nDefine the number of digits after the radixpoint\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"decimal\", { digits: 3 });\r\n});\r\n```\r\nWhen TAB out of the input the digits autocomplate with 0 if the digits option is given a valid number.\r\n\r\nGrouping support through:  autoGroup, groupSeparator, groupSize\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"decimal\", { radixPoint: \",\", autoGroup: true, groupSeparator: \".\", groupSize: 3 });\r\n});\r\n```\r\n\r\nAllow minus and/or plus symbol\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"decimal\", { allowMinus: false });\r\n   $(selector).inputmask(\"integer\", { allowMinus: false, allowPlus: true });\r\n});\r\n```\r\n\r\n## regex extensions\r\n\r\nWith the regex extension you can use any regular expression as a mask.  Currently this does only input restriction.  \r\nThere is no further masking visualization.\r\n\r\nExample simple email regex:\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask('Regex', { regex: \"[a-zA-Z0-9._%-]+@[a-zA-Z0-9-]+\\\\.[a-zA-Z]{2,4}\" });\r\n});\r\n```\r\n\r\n## phone extensions\r\nUses the phone mask definitions from https://github.com/andr-04/inputmask-multi\r\n\r\n```javascript\r\n $(selector).inputmask(\"phone\", {\r\n                url: \"Scripts/jquery.inputmask/phone-codes/phone-codes.json\", \r\n                onKeyValidation: function () { //show some metadata in the console\r\n                    console.log($(this).inputmask(\"getmetadata\")[\"name_en\"]);\r\n                } \r\n  });\r\n```\r\n\r\n## other extensions\r\n\r\nAn ip address alias for entering valid ip-addresses.\r\n\r\n```javascript\r\n$(document).ready(function(){\r\n   $(selector).inputmask(\"ip\");\r\n});\r\n```\r\n\r\nYou can find/modify/extend this alias in the jquery.inputmask.extensions.js\r\n\r\n[npm-url]: https://npmjs.org/package/jquery.inputmask\r\n[npm-image]: https://img.shields.io/npm/v/jquery.inputmask.svg\r\n[david-url]: https://david-dm.org/RobinHerbots/jquery.inputmask#info=dependencies\r\n[david-image]: https://img.shields.io/david/RobinHerbots/jquery.inputmask.svg\r\n[david-dev-url]: https://david-dm.org/RobinHerbots/jquery.inputmask#info=devDependencies\r\n[david-dev-image]: https://img.shields.io/david/dev/RobinHerbots/jquery.inputmask.svg\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}